#!/usr/bin/env bash

set -euo pipefail

readonly blue="\e[0;34m"
readonly green="\e[0;92m"
readonly purple="\e[0;35m"
readonly red="\e[0;91m"
readonly reset="\e[0m"
readonly yellow="\e[0;33m"

_colorize() {
  local -r ci_status="$1"
  local -r msg="$2"

  case "${ci_status}" in
    success)
      echo -e "${green}${msg}${reset}"
      ;;
    failure|error|action_required|cancelled|timed_out)
      echo -e "${red}${msg}${reset}"
      ;;
    *)
      echo "${msg}"
  esac
}

_assess() {
  local -r ci_status="$1"

  case "${ci_status}" in
    success)
      echo 'Super duper.'
      ;;
    failure|error|action_required|cancelled|timed_out)
      echo 'Oh no.'
      ;;
    'no status')
      echo 'Did you remember to push to the remote?'
      ;;
    *)
      echo "Not sure what that's about..."
  esac
}

_poll() {
  local -r sha="$1"
  local short_sha; short_sha="$(cut -c1-8 <<< "${sha}")"; readonly short_sha

  local web_url; web_url=$(hub browse -u); readonly web_url

  local ci_status='pending'
  until [ "${ci_status}" != 'pending' ]
  do
    echo -e "${purple}$(date)${reset}"
    echo -ne "Checking CI status of ${blue}${web_url}/commit/${sha}${reset} ... "
    ci_status="$(hub ci-status "${sha}")" || true
    if [ "${ci_status}" = 'pending' ]; then
      echo -e "${yellow}${ci_status}${reset}"
      sleep 5
    fi
  done
  readonly ci_status

  local msg; msg="CI ${ci_status}. $(_assess "${ci_status}")"

  # Toast notification
  osascript -e "display notification \"${msg} ${short_sha}\""
  # Colorized banner
  _colorize "${ci_status}" "$(figlet "${ci_status}")"
  # Link(s)
  echo -e "${blue}${web_url}${reset}"
  echo -e "${blue}$(hub pr show -u -h "${sha}")${reset}"
  # Audio announcement
  say -v Karen "${msg}"
}

_poll "${1:-"$(git rev-parse HEAD)"}"
