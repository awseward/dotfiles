#!/usr/bin/env bash

set -euo pipefail

readonly blue="\e[0;34m"
readonly green="\e[0;92m"
readonly purple="\e[0;35m"
readonly red="\e[0;91m"
readonly reset="\e[0m"
readonly yellow="\e[0;33m"

_in_color() {
  local -r color="$1"
  local msg; readonly msg="$(cat -)"
  if [ "${msg}" != '' ]; then
    echo -e "${color}${msg}${reset}"
  fi
}

_colorize() {
  local -r ci_status="$1"
  local -r msg="$2"

  case "${ci_status}" in
    success)
      echo -e "${green}${msg}${reset}"
      ;;
    failure|error|action_required|cancelled|timed_out)
      echo -e "${red}${msg}${reset}"
      ;;
    *)
      echo "${msg}"
  esac
}

_assess() {
  local -r ci_status="$1"

  case "${ci_status}" in
    success)
      echo 'Super duper.'
      ;;
    failure|error|action_required|cancelled|timed_out)
      echo 'Oh no.'
      ;;
    'no status')
      echo 'Did you remember to push to the remote?'
      ;;
    *)
      echo "Not sure what that's about..."
  esac
}

_poll() {
  local -r sha="$1"
  local short_sha; readonly short_sha="$(cut -c1-8 <<< "${sha}")"

  local web_url; readonly web_url="$(hub browse -u)"
  local branch_name; readonly branch_name="$(git rev-parse --abbrev-ref HEAD)"

  local ci_status='pending'
  until [ "${ci_status}" != 'pending' ]; do
    echo -e "${purple}$(date)${reset}"
    echo -ne "Checking CI status of ${blue}${web_url}/commit/${sha}${reset} ... "
    ci_status="$(hub ci-status "${sha}" 2>&1)" || true

    case "${ci_status}" in
      success|failure|error|action_required|cancelled|timed_out|'no status') :
        ;;
      pending)
        echo -e "${yellow}${ci_status}${reset}"
        sleep 5
        ;;
      *)
        echo -e "${red}[ERROR!]${reset} ${ci_status}"
        ci_status='pending'
        sleep 5
    esac
  done
  readonly ci_status

  local msg; msg="CI ${ci_status}. $(_assess "${ci_status}")"

  # Toast notification
  osascript -e "display notification \"${msg} ${short_sha}\""

  # Colorized banner
  _colorize "${ci_status}" "$(figlet "${ci_status}")"

  # Link(s)
  echo 'Links:'
  echo -e "→ Browse:  ${blue}${web_url}${reset}"
  echo -e "→ Compare: $(hub compare -u "${branch_name}" > >(_in_color "${blue}") 2> >(_in_color "${yellow}"))"
  echo -e "→ PR:      $(hub pr show -u -h "${branch_name}" > >(_in_color "${blue}") 2> >(_in_color "${yellow}"))"
  echo

  # Audio announcement(s)
  if [ -f "${HOME}/.config/dotfiles-include/sox.sh" ]; then
    # shellcheck source=/dev/null
    source "${HOME}/.config/dotfiles-include/sox.sh"
    sox_random_beep > /dev/null 2>&1 || true
  fi
  say -v Karen "${msg}" &
}

_poll "${1:-"$(git rev-parse HEAD)"}"
