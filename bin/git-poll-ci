#!/usr/bin/env osh

set -euo pipefail

const colors = {
  blue:   $'\e[0;34m',
  green:  $'\e[0;92m',
  purple: $'\e[0;35m',
  red:    $'\e[0;91m',
  reset:  $'\e[0m',
  yellow: $'\e[0;33m'
}

# Mostly here for backwards compatibility… should probably just remove these…
const blue   = colors['blue']
const green  = colors['green']
const purple = colors['purple']
const red    = colors['red']
const reset  = colors['reset']
const yellow = colors['yellow']


proc _in_color(color_name) {
  const msg = "$(cat -)"

  if [ "${msg}" != '' ]; then
    const color = colors[$color_name]
    const reset = colors['reset']

    echo -e "${color}${msg}${reset}"
  fi
}

_colorize() {
  local -r ci_status="$1"
  local -r msg="$2"

  case "${ci_status}" in
    success)
      echo -e "${green}${msg}${reset}"
      ;;
    failure|error|action_required|cancelled|timed_out)
      echo -e "${red}${msg}${reset}"
      ;;
    pending)
      echo -e "${yellow}${msg}${reset}"
      ;;
    *)
      echo "${msg}"
  esac
}

_assess() {
  local -r ci_status="$1"

  case "${ci_status}" in
    success)
      echo 'Super duper.'
      ;;
    failure|error|action_required|cancelled|timed_out)
      echo 'Oh no.'
      ;;
    'no status')
      echo 'Did you remember to push to the remote?'
      ;;
    *)
      echo "Not sure what that's about…"
  esac
}

_poll() {
  local -r sha="$1"
  local short_sha; short_sha="$(cut -c1-8 <<< "${sha}")"; readonly short_sha

  local commit_url; commit_url="$(hub browse -u -- "commit/${sha}")"; readonly commit_url
  local branch_name; branch_name="$(git rev-parse --abbrev-ref HEAD)"; readonly branch_name

  local ci_status='pending'
  until [ "${ci_status}" != 'pending' ]; do
    echo -e "${purple}$(date)${reset} – CI Status"
    echo -ne "Checking ${green}${branch_name}${reset} (${blue}${commit_url}${reset})… "
    ci_status="$(hub ci-status "${sha}" 2>&1)" || true

    case "${ci_status}" in
      success|failure|error|action_required|cancelled|timed_out|'no status') :
        ;;
      pending)
        _colorize "${ci_status}" "${ci_status}"
        sleep 5
        ;;
      *)
        echo -e "${red}[ERROR!]${reset} ${ci_status}"
        ci_status='pending'
        sleep 5
    esac
  done
  readonly ci_status

  local msg; msg="CI ${ci_status}. $(_assess "${ci_status}")"

  # Toast notification
  osascript -e "display notification \"${msg} ${short_sha}\""

  # Colorized banner
  _colorize "${ci_status}" "$(figlet "${ci_status}")"

  # Link(s)
  echo 'Links:'
  echo -e "→ Browse:  ${blue}${commit_url}${reset}"
  echo -e "→ Compare: $(hub compare -u "${branch_name}" > >(_in_color blue) 2> >(_in_color yellow))"
  echo -e "→ PR:      $(hub pr show -u -h "${branch_name}" > >(_in_color blue) 2> >(_in_color yellow))"
  echo

  # Audio announcement(s)
  if [ -f "${HOME}/.config/dotfiles-include/sox.sh" ]; then
    # shellcheck source=/dev/null
    source "${HOME}/.config/dotfiles-include/sox.sh"
    sox_random_beep > /dev/null 2>&1 || true
  fi
  say -v Karen "${msg}" &
}

_poll "${1:-"$(git rev-parse HEAD)"}"
