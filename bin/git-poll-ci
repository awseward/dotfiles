#!/usr/bin/env osh

set -euo pipefail
shopt --set oil:basic

const colors = {
  blue:   $'\e[0;34m',
  green:  $'\e[0;92m',
  purple: $'\e[0;35m',
  red:    $'\e[0;91m',
  yellow: $'\e[0;33m'
  # ---
  reset:  $'\e[0m',
}

proc _color(color_name) {
  const msg = "$(cat -)"
  if (msg ~== '') { return }

  const color = colors[$color_name]
  const reset = colors->reset
  echo -e "${color}${msg}${reset}"
}

proc _colorize(status, msg) {
  var color_name = ''
  case "${status}" in
    success)
      setvar color_name = 'green'
      ;;
    pending|'no status')
      setvar color_name = 'yellow'
      ;;
    failure|error|action_required|cancelled|timed_out)
      setvar color_name = 'red'
      ;;
    *)
      setvar color_name = 'reset'
      ;;
  esac
  _color "${color_name}" <<< "${msg}"
}

proc _assess(status) {
  case "${status}" in
    success)
      echo 'Super duper.'
      ;;
    failure|error|action_required|cancelled|timed_out)
      echo 'Oh no.'
      ;;
    'no status')
      echo 'Did you remember to push to the remote?'
      ;;
    *)
      echo "Not sure what that's about…"
  esac
}

proc _try_status(sha) {
  shopt --unset errexit { hub ci-status "${sha}" 2>&1 }
}

proc _try_pr_show(branch_name) {
  shopt --unset errexit {
    hub pr show -u -h "${branch_name}" \
       > >(_color blue) \
      2> >(_color yellow)
  }
}

proc _toast(msg) { osascript -e "display notification \"${msg}\"" }

proc _try_beeps(sox_include_file) {
  if ! test -f "${sox_include_file}" { return }
  # shellcheck source=/dev/null
  source "${sox_include_file}"
  sox_random_beep > /dev/null 2>&1 || true
}

proc _speak(msg) { say -v Karen "${msg}" }

proc _poll(sha) {
  const branch_name = "$(git rev-parse --abbrev-ref HEAD)"
  const commit_url  = "$(hub browse -u -- "commit/${sha}")"
  const short_sha   = "$(cut -c1-8 <<< "${sha}")"

  var status_output = 'pending'
  until test "${status_output}" != 'pending'; do
    echo -e "$(date | _color purple) – CI Status"
    echo -ne "Checking $(_color green <<< "$branch_name") ($(_color blue <<< "$commit_url"))… "
    setvar status_output = "$(_try_status "$sha")"

    case "${status_output}" in
      success|failure|error|action_required|cancelled|timed_out|'no status') :
        ;;
      pending)
        _colorize "${status_output}" "${status_output}"
        sleep 5
        ;;
      *)
        echo -e "$(_color red <<< '[ERROR!]') ${status_output}"
        setvar status_output = 'pending'
        sleep 5
    esac
  done
  const status = "${status_output}"

  const msg = "CI ${status}. $(_assess "${status}")"

  # Colorized banner
  _colorize "${status}" $'\n'"$(figlet "${status}")"
  # Link(s)
  echo 'Links:'
  echo -e "→ Browse:  $(_color blue <<< ${commit_url})"
  echo -e "→ Compare: $(hub compare -u "${branch_name}" | _color blue)"
  echo -e "→ PR:      $(_try_pr_show "${branch_name}")"
  echo
  # Toast notification
  _toast "${msg} sha: ${short_sha}"
  # Audio announcement(s)
  _try_beeps "${HOME}/.config/dotfiles-include/sox.sh"
  _speak "${msg}"
}

_poll "${1:-"$(git rev-parse HEAD)"}"
