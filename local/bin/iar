#!/usr/bin/env ruby

# USAGE
#
# iar 'https://example.com/foo/bar?baz=42'
#
#   • This will return the latest capture if one exists, otherwise will create
#     one
#
#
# FORCE=true iar 'https://example.com/foo/bar?baz=42'
#
#   • This will force a capture to be created, whether or not any captures
#     already exist
#

require 'uri'
require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'

  # gem 'pry'
  gem 'colorize'
  gem 'faraday'
end

def blue(x)   = x.colorize :blue
def red(x)    = x.colorize :red
def yellow(x) = x.colorize :yellow
def cyan(x)   = x.colorize :cyan

def info(msg) = STDERR.puts "[#{blue 'INFO'}] #{msg}"

def error(msg) = STDERR.puts "[#{red 'ERROR'}] #{msg}"

def redirect?(response) = (300..399).cover? response.status

def redirect_or?(response)
  # We're using the block as a kind of "or else" option. It's a little weird,
  # but oh well.
  redirect?(response).tap { yield response.status if !_1 }
end

def head(...) = Faraday.head(...)

def location(response) = response.headers['Location']

def without_fragment(uri)
  fragment = uri.fragment

  uri.dup.
    tap  { _1.fragment = nil }.
    then { yield _1.to_s }.
    then { URI.parse _1 }.
    tap  { _1.fragment = fragment }
end

def perform(uri, force:)
  iar_url = without_fragment(uri) do |url|
    break nil if !!force

    info "Checking for existing Internet Archive captures of #{yellow url}"
    response = head "https://web.archive.org/web/#{url}"

    location response if redirect?(response)
  end

  iar_url ||= without_fragment(uri) do |url|
    info "Creating a new Internet Archive capture of #{yellow url}"
    response = head "https://web.archive.org/save/#{url}"

    location response if redirect_or?(response) { error "Should have been a redirect, but got status: #{red _1.to_s}"; exit 1 }
  end

  STDOUT.puts iar_url unless iar_url.nil?
rescue StandardError => e
  error "Something went wrong attempting to resolve Internet Archive capture of #{yellow url}"
  exit 1
end

# ---

case ARGV
in [url]
  URI.parse(url).freeze.then { perform _1, force: ENV['FORCE'] == 'true' }
else
  error "Invalid args: #{ARGV.inspect}. See #{cyan __FILE__} for usage."
  exit 1
end
