#!/usr/bin/env ruby

# USAGE
#
# iar 'https://example.com/foo/bar?baz=42'
#
#   • This will return the latest capture if one exists, otherwise will create
#     one
#
#
# FORCE=true iar 'https://example.com/foo/bar?baz=42'
#
#   • This will force a capture to be created, whether or not any captures
#     already exist
#

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'

  # gem 'pry'
  gem 'colorize'
  gem 'faraday'
end

def info(msg) = STDERR.puts "[#{'INFO'.colorize :blue}] #{msg}"

def error(msg) = STDERR.puts "[#{'ERROR'.colorize :red}] #{msg}"

def redirect?(response) = (300..399).cover? response.status

def redirect_or?(response)
  # We're using the block as a kind of "or else" option. It's a little weird,
  # but oh well.
  redirect?(response).tap { yield response.status if !_1 }
end

def location(response) = response.headers['Location']

def perform(url, force:)
  iar_url = if !force
    info "Checking for existing Internet Archive captures of #{url.colorize :yellow}"
    response = Faraday.head "https://web.archive.org/web/#{url}"

    location response if redirect?(response)
  end

  iar_url ||= begin
    info "Creating a new Internet Archive capture of #{url.colorize :yellow}"
    response = Faraday.head "https://web.archive.org/save/#{url}"

    location response if redirect_or?(response) { error "Should have been a redirect, but got status: #{_1.to_s.colorize :red}"; exit 1 }
  end

  STDOUT.puts iar_url unless iar_url.nil?
rescue StandardError => e
  error "Something went wrong attempting to resolve Internet Archive capture of #{url.colorize :yellow}"
  exit 1
end

# ---

case ARGV
in [url]
  perform url, force: ENV['FORCE'] == 'true'
else
  error "Invalid args: #{ARGV.inspect}. See #{__FILE__.colorize :cyan} for usage."
  exit 1
end
