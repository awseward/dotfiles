#!/usr/bin/env ysh

const _default_mtime = '+30'

proc dry_run(mtime=_default_mtime) {
  _collect_plan $mtime (&plan)

  if (plan === {}) {
    var msg =  'Nothing to do… exiting.'
    redir >&2 { write -- $msg }
    exit 0
  }

  write -n -- 'Will move the following: '; = plan
}

proc run(mtime=_default_mtime) {
  try { json write -- ({ mtime }) | _hcio start }

  _collect_plan $mtime (&plan)
  if (plan === {}) {
    var msg =  'Nothing to do… exiting.'

    redir >&2 { write -- $msg }
    _hcio success <<< $msg
    exit 0
  }

  _ensure_target_directory

  for src, dst in (plan) { mv -v $src $dst }

  json write (plan) | _hcio success
}

proc help {
  var f_ = $(basename $0)

  redir >&2 {
    write -- """

    === Downloads Overflow ===

    This script sweeps files over a certain age (using mtime) into a target
    directory.

    A note on the value of mtime: it depends on whether you've got the GNU or
    BSD implementation of find. BSD find accepts units ([m]inutes, [h]ours,
    [d]ays, etc.), but the GNU find does not (it assumes days, and errors if
    given a unit).

    USAGES

      • $f_ run [mtime]

        Move all files matching the given mtime value.

      • $f_ dry_run [mtime]

        Describe what run would do if given the same arguments.
    """
  }

  exit 1
}

proc _p(...args) { redir >&2 { write -- ">>> $[join(args, ' ')]" } }

proc _ensure_target_directory { mkdir -v -p $[config['dst']] }

proc _hcio (...args) {
  var hcio = config['hcio']

  healthchecks.io.ping.sh @args $[hcio['check_id']] $[hcio['run_id']]
}

# NOTE re: BSD vs GNU find
#
# They differ in that the BSD implementation accepts units ([m]inutes,
# [h]ours, [d]ays, etc.), but the GNU implementation does not (it takes only
# a numeric value, treating it as a number of days).
#
# ##### BSD
#
# +/- : older/younger than; e.g.
#        `+60d` means "older than 60 days"
#        ` -2h` means "younger than 2 hours"
#         etc.
#
# From man find(1):
# > -mtime n[smhdw]
# >         If no units are specified, this primary evaluates to true if the difference
# >         between the file last modification time and the time find was started, rounded
# >         up to the next full 24-hour period, is n 24-hour periods.
# >
# >         If units are specified, this primary evaluates to true if the difference
# >         between the file last modification time and the time find was started is
# >         exactly n units.  Please refer to the -atime primary description for
# >         information on supported time units.
#
# ###### GNU
#
# +/- : older/younger than; e.g.
#        `+60` means "older than 60 days"
#        ` -2` means "younger than 2 days"
#         etc.
#
# From man find(1):
# > -mtime n
# >    File's data was last modified less than, more than or exactly n*24 hours
# >    ago.  See the comments for -atime to understand how rounding affects the
# >    interpretation of file modification times.
#
#
# #### How this shakes out in practice
#
# If you give units to GNU find, it will error, printing something like:
#
# > find: invalid argument `+60d' to `-mtime'
#
# If you do the converse, giving no units to BSD find, it just treats the
# argument as a value in days. This may have been obvious from reading the
# man page's text, but it's potentially worth highlighting for clarity's sake
# anyway.
#
proc _collect_plan(mtime; out) {
  _p                "find $[config['src']] -maxdepth 1 -mindepth 1 -mtime $mtime"
  var candidates = @(find $[config['src']] -maxdepth 1 -mindepth 1 -mtime $mtime)
  var plan = {}

  if (candidates !== []) {
    var ts = $(date -u '+%Y%m%d%H%M%S')
    for filepath in (candidates) {
      setvar plan[filepath] = "$[config['dst']]/$ts-$(basename $filepath)"
    }
  }

  call out->setValue(plan)
}

proc _init_config (; out) {
  var config_home = get(dict(ENV), 'XDG_CONFIG_HOME', "$[ENV.HOME]/.config")
  read --raw-line (&check_id) < "$config_home/dloverflow/healthchecks.io.uuid"

  call out->setValue({
    src: "$[ENV.HOME]/Downloads",
    dst: "$[ENV.HOME]/stale_downloads",
    hcio: {
      check_id,
      run_id: ($(uuidgen) => lower())
    }
  })
}


# ---

if ([] === ARGV) { help; exit 1 }

_init_config (&config)

runproc @ARGV
