#!/usr/bin/env bash

set -euo pipefail

dotfiles="$HOME/.dotfiles"
tag="macos"

_configure_spectacle() {
  # This is a bit wacky, but couldn't quite get rcm to do what I wanted here
  local rel_path='Library/Application Support/Spectacle/Shortcuts.json'
  local spec_src="$dotfiles/tag-$tag/$rel_path"
  local spec_dst="$HOME/$rel_path"

  diff "$spec_src" "$spec_dst" >/dev/null 2>&1 \
    || cp -v "$spec_src" "$spec_dst"
}

_configure_dnscrypt_proxy() {
  link_proxy_conf() {
    local conf_filename='dnscrypt-proxy.toml'
    local src_path="$dotfiles/tag-$tag/rcm-exclude/$conf_filename"
    local dest_path="/usr/local/etc/$conf_filename"

    ln -v -s "$src_path" "$dest_path" || true
  }

  create_empty_rules_files() {
    # Set up "rules" files (proxy won't start w/o these if configured to use)
    local brew_pfx; brew_pfx="$(brew --prefix)"
    local share_dir; share_dir="$(
      find "$brew_pfx/Cellar/dnscrypt-proxy" -type d -name 'share' \
        | sort -u \
        | tail -n1
    )"

    local rule_src
    local rule_content
    while IFS='' read -r rule_src; do
      rule_basename="$(basename "${rule_src//example-/}")"
      rule_dest="/usr/local/etc/dnscrypt-proxy.d/$rule_basename"
      rule_content="# For example, see $rule_src"

      if [ ! -f "$rule_dest" ]; then
        echo "Creating empty file at $rule_dest"
        echo "$rule_content" > "$rule_dest"
      fi
    done < <(find "$share_dir" -type f -name '*.txt')
  }

  # ---

  link_proxy_conf
  create_empty_rules_files
}

_clone_iterm_color_schemes() {
  local schemes_repo='git@github.com:mbadolato/iTerm2-Color-Schemes.git'
  local schemes_dir="$HOME/.iterm2-color-schemes"

  if [ ! -d "$schemes_dir" ]; then
    git clone --depth=1 "$schemes_repo" "$schemes_dir"
  fi
}

_set_up_ssh_keys() {
  local ssh_dir="$HOME/.ssh"
  local priv_filename="id_rsa"
  local pub_filename="$priv_filename.pub"
  local priv_filepath="$ssh_dir/$priv_filename"
  local pub_filepath="$ssh_dir/$pub_filename"

  if [ ! -f "$priv_filepath" ] && [ ! -f "$pub_filepath" ]; then
    if [ "${OP_SESSION_my:-}" = "" ]; then
      eval "$(op signin my)"
    fi
    op get document "$priv_filename" --vault=Personal > "$priv_filepath"
    op get document "$pub_filename"  --vault=Personal > "$pub_filepath"
  fi
}

_display_messages() {
  if [ -z ${TERM+x} ] || [ "$TERM" = 'dumb' ]; then
    export TERM='xterm-256color'
  fi

  mdp --nofade <<MSG

# Dotfiles setup complete (mostly...)!

Following slides contain futher information.

---

## iTerm2 Configuration

Please make sure iTerm2 is configured to load from \`~/.iterm\`.

This can be configured by navigating to \`Preferences > General\` and then
looking for the phrase (near the bottom):

\`Load preferences from a custom folder or URL\`

Also, when importing color schemes from \`~/.iterm2-color-schemes\`, in case
finder is not configured to show hidden files/folders, you can quickly toggle
this with \`CMD + SHIFT + .\`.

Don't forget to not only import it, but then also configure it to be used as
well.

---

## SSH Configuration

This setup process currently attempts to auto-setup ssh keys, but does not
attempt to do anything for \`~/.ssh/config\`.

---

## DNSCrypt Usage

By now, \`dnscrypt-proxy\` should be set up and running, but to actually use
it, you'll need to configure DNS in MacOS' Network settings to use
\`127.0.0.1\`.

---

## Shell Restart

If this is the very first time running this on a given machine, you may want to
restart the shell or just hop into a new tab from this point.

I'd like to automate that, but in what I've tried so far, nothing has been
able to do the final transition from macOS' very old bash to zsh automatically,
so it's still a bit manual for now.

MSG
}

_configure_spectacle
_configure_dnscrypt_proxy
_clone_iterm_color_schemes
_set_up_ssh_keys
_display_messages
