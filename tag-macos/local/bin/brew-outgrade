#!/usr/bin/env osh
# shellcheck shell=bash

# https://web.archive.org/web/20250514000439/https://oils.pub/osh.html#4-strict-mode-improves-shell-scripts
shopt --set strict:all

set -euo pipefail

# The name of this, `brew-outgrade` is a portmanteau of outdated and upgrade,
# since my usual workflow is:
#
# > brew update && brew outdated
# > brew upgrade
#

# i – for interactive
i() {
  xargs -t brew <<< update

  shopt --unset strict:all
  if [ $(brew outdated | wc -l) -eq 0 ]; then
    >&2 echo 'No outdated brew dependencies; nothing to do…'
    return 0
  fi
  shopt --set strict:all

  c | awk '{ print $1, "#", $2, "→", $3 }' \
    | column -t \
    | fzf \
        --bind 'ctrl-a:select-all' \
        --layout 'reverse' \
        --height '50%' \
        --multi \
        --exit-0 \
        --prompt='brew upgrade> ' \
        --header 'Outdated brew packages' \
    | awk '{ print $1 }' \
    | xargs --no-run-if-empty -t brew upgrade
}

# a – for all
a() {
  xargs -t brew <<< update
  xargs -t brew <<< outdated
  xargs -t brew <<< upgrade
}

# j – for json
j() {
  brew outdated --json | jq -c '(to_entries[] | .value)[] |
    {
      name,
      installed: (
        if (.installed_versions | type == "array") then
          .installed_versions | first
        else
          .installed_versions
        end
      ),
      current: .current_version
    }
  '
}

# c – for columns
c() { j | jq -r '"\(.name)\t\(.installed)\t\(.current)"' | column -t; }

"${@:-i}"
